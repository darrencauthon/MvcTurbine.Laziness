// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace MvcTurbine.Laziness.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Lazy resolution from the service locator")]
    public partial class LazyResolutionFromTheServiceLocatorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LazyResolutionFromTheServiceLocator.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Lazy resolution from the service locator", "In order to resolve some dependencies after an object is constructed\r\nAs a progra" +
                    "mmer\r\nI want to resolve implementations of ILazy<T> from the container", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve ILazy<T> from a Unity container")]
        public virtual void ResolveILazyTFromAUnityContainer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve ILazy<T> from a Unity container", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I have a UnityServiceLocator");
#line 8
testRunner.And("all lazy setup has been done");
#line 9
testRunner.And("I have spun the Laziness blade");
#line 10
testRunner.When("I resolve an ILazy<Repository>");
#line 11
testRunner.Then("I should get an ILazy<Repository>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve ILazy<T> from a StructureMap container")]
        public virtual void ResolveILazyTFromAStructureMapContainer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve ILazy<T> from a StructureMap container", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
testRunner.Given("I have a StructureMapServiceLocator");
#line 15
testRunner.And("all lazy setup has been done");
#line 16
testRunner.And("I have spun the Laziness blade");
#line 17
testRunner.When("I resolve an ILazy<Repository>");
#line 18
testRunner.Then("I should get an ILazy<Repository>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve ILazy<T> from a Ninject container")]
        public virtual void ResolveILazyTFromANinjectContainer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve ILazy<T> from a Ninject container", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("I have a NinjectServiceLocator");
#line 22
testRunner.And("all lazy setup has been done");
#line 23
testRunner.And("I have spun the Laziness blade");
#line 24
testRunner.When("I resolve an ILazy<Repository>");
#line 25
testRunner.Then("I should get an ILazy<Repository>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve ILazy<T> from a Windsor container")]
        public virtual void ResolveILazyTFromAWindsorContainer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve ILazy<T> from a Windsor container", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
testRunner.Given("I have a WindsorServiceLocator");
#line 29
testRunner.And("all lazy setup has been done");
#line 30
testRunner.And("I have spun the Laziness blade");
#line 31
testRunner.When("I resolve an ILazy<Repository>");
#line 32
testRunner.Then("I should get an ILazy<Repository>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
