// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.0.0
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace MvcTurbine.Laziness.Specs.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Service provider interceptor that resolves ILazy<T>")]
    public partial class ServiceProviderInterceptorThatResolvesILazyTFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ServiceLocatorThatHandlesLazyResolution.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Service provider interceptor that resolves ILazy<T>", "In order to allow lazy resolution of dependencies\r\nAs a service locator intercept" +
                    "or\r\nI want to intercept requests for ILazy<T> and return a Lazy<T> implementatio" +
                    "n", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get ILazy<T> with Resolve<TestClass>")]
        public virtual void GetILazyTWithResolveTestClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get ILazy<T> with Resolve<TestClass>", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("I have been set up to intercept calls to a service locator");
#line 8
testRunner.And("a class named TestClass exists");
#line 9
testRunner.When("Resolve<ILazy<TestClass>> is called");
#line 10
testRunner.Then("the result should be an implementation of Lazy<TestClass>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get ILazy<T> with Resolve(typeof(TestClass))")]
        public virtual void GetILazyTWithResolveTypeofTestClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get ILazy<T> with Resolve(typeof(TestClass))", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
testRunner.Given("I have been set up to intercept calls to a service locator");
#line 14
testRunner.And("a class named TestClass exists");
#line 15
testRunner.When("Resolve(typeof(ILazy<TestClass>)) is called");
#line 16
testRunner.Then("the result should be an implementation of Lazy<TestClass>");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get the normal result from the service locator when not resolving ILazy")]
        public virtual void GetTheNormalResultFromTheServiceLocatorWhenNotResolvingILazy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get the normal result from the service locator when not resolving ILazy", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("I have been set up to intercept calls to a service locator");
#line 20
testRunner.And("a class named TestClass exists");
#line 21
testRunner.When("I resolve TestClass");
#line 22
testRunner.Then("the result should be an implementation of TestClass from the service locator");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve a generic class properly")]
        public virtual void ResolveAGenericClassProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve a generic class properly", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.Given("I have been set up to intercept calls to a service locator");
#line 26
testRunner.And("a class named TestGenericClass<T> exists");
#line 27
testRunner.When("I resolve TestGenericClass<string>");
#line 28
testRunner.Then("the result should be an implementation of TestGenericClass<string> from the servi" +
                    "ce locator");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Resolve a generic interface properly")]
        public virtual void ResolveAGenericInterfaceProperly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Resolve a generic interface properly", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
testRunner.Given("I have been set up to intercept calls to a service locator");
#line 32
testRunner.And("a class named ITestGenericClass<T> exists");
#line 33
testRunner.When("I resolve ITestGenericClass<string>");
#line 34
testRunner.Then("the result should be an implementation of ITestGenericClass<string> from the serv" +
                    "ice locator");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Something other than Resolve is called")]
        public virtual void SomethingOtherThanResolveIsCalled()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Something other than Resolve is called", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
testRunner.Given("I have been set up to intercept calls to a service locator");
#line 38
testRunner.When("I call Release");
#line 39
testRunner.Then("the Release call should be invoked");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
